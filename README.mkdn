# [NAME][NAME]

AnyEvent::BitTorrent - Yet Another BitTorrent Client Module

# [Synopsis][Synopsis]

    use AnyEvent::BitTorrent;
    my $client = AnyEvent::BitTorrent->new( path => 'some.torrent' );
    AE::cv->recv;

# [Description][Description]

This is a painfully simple BitTorrent client written on a whim that implements
the absolute basics. For a full list of what's currently supported, what you
will likely find in a future version, and what you'll never get from this, see
the section entitled "[This Module is Lame!](#This_Module_is_Lame!)"

# [Methods][Methods]

The API, much like the module itself, is simple.

Anything you find by skimming the source is likely not ready for public use
and will be subject to change before `v1.0.0`. Here's the public interface as
of this version:

## [`new( ... )`][new(_..._)]

This constructor understands the following arguments:

- `path`

This is the only required parameter. It's the path to a valid .torrent file.

- `basedir`

This is the base directory all data will be stored in and/or read from.
Multifile torrents will create another directory below this to store all
files.

By default, this is the current working directory when
[`new( ... )`](#new(_..._)) is called.

- `port`

This is the preferred port local host binds and expects incoming peers to
connect to.

By default, this is a zero; the system will pick a port number randomly.

- `on_hash_fail`

This is a subroutine called whenever a piece fails to pass
[hashcheck](#hashcheck(_[...]_)). The callback is handed the piece's index.

- `on_hash_pass`

This is a subroutine called whenever a piece passes its
[hashcheck](#hashcheck(_[...]_)). The callback is handed the piece's index.

- `state`

This must be one of the following:

- `started`

This is the default. The client will attempt to create new connections, make
and fill requests, etc. This is normal client behavior.

- `paused`

In this state, connections will be made and accepted but no piece requests
will be made or filled. To resume full, normal behavior, you must call
[`start( )`](#start(_)).

- `stopped`

Everything is put on hold. No new outgoing connections are attempted and
incoming connections are rejected. To resume full, normal behavior, you must
call [`start( )`](#start(_)).

## [`hashcheck( [...] )`][hashcheck(_[...]_)]

This method expects...

- ...a list of integers. You could use this to check a range of pieces (a
single file, for example).

    $client->hashcheck( 1 .. 5, 34 .. 56 );
- ...a single integer. Only that specific piece is checked.

    $client->hashcheck( 17 );
- ...nothing. All data related to this torrent will be checked.

    $client->hashcheck( );

As pieces pass or fail, your `on_hash_pass` and `on_hash_fail` callbacks are
triggered.

## [`start( )`][start(_)]

Sends a 'started' event to trackers and starts performing as a client is
expected. New connections are made and accepted, requests are made and filled,
etc.

## [`stop( )`][stop(_)]

Sends a stopped event to trackers, closes all connections, stops attempting
new outgoing connections, rejects incoming connections and closes all open
files.

## [`pause( )`][pause(_)]

The client remains mostly active; new connections will be made and accepted,
etc. but no requests will be made or filled while the client is paused.

## [`infohash( )`][infohash(_)]

Returns the 20-byte SHA1 hash of the value of the info key from the metadata
file.

## [`peerid( )`][peerid(_)]

Returns the 20 byte string used to identify the client. Please see the
[spec](#PeerID_Specification) below.

## [`port( )`][port(_)]

Returns the port number the client is listening on.

## [`size( )`][size(_)]

Returns the total size of all [files](#files(_)) described in the torrent's
metadata.

Note that this value is recalculated every time you call this method. If you
need it more than occasionally, it may be best to cache it yourself.

## [`name( )`][name(_)]

Returns the UTF-8 encoded string the metadata suggests we save the file (or
directory, in the case of multi-file torrents) under.

## [`uploaded( )`][uploaded(_)]

Returns the total amount uploaded to remote peers.

## [`downloaded( )`][downloaded(_)]

Returns the total amount downloaded from other peers.

## [`left( )`][left(_)]

Returns the approximate amount based on the pieces we still
[want](#wanted(_)) multiplied by the [size of pieces](#piece_length(_)).

## [`piece_length( )`][piece_length(_)]

Returns the number of bytes in each piece the file or files are split into.
For the purposes of transfer, files are split into fixed-size pieces which are
all the same length except for possibly the last one which may be truncated.

## [`bitfield( )`][bitfield(_)]

Returns a packed binary string in ascending order (ready for `vec()`). Each
index that the client has is set to one and the rest are set to zero.

## [`wanted( )`][wanted(_)]

Returns a packed binary string in ascending order (ready for `vec()`). Each
index that the client has or simply does not want is set to zero and the rest
are set to one.

Currently, this is just `~ $client->bitfield( )` but if your subclass has
file based priorities, you could only 'want' the pieces which lie inside of
the files you want.

## [`files( )`][files(_)]

Returns a list of hash references with the following keys:

- `length`

Which is the size of file in bytes.

- `path`

Which is the absolute path of the file.

## [`peers( )`][peers(_)]

Returns the list of currently connected peers. The organization of these peers
is not yet final so... don't write anything you don't expect to break before
we hit `v1.0.0`.

## [`state( )`][state(_)]

Returns `active` if the client is [started](#start(_)), `paused` if client
is [paused](#pause(_)), and `stopped` if the client is currently
[stopped](#stop(_)).

# [This Module is Lame!][This_Module_is_Lame!]

Yeah, I said it.

There are a few things a BitTorrent client must implement (to some degree) in
order to interact with other clients in a modern day swarm.
[AnyEvent::BitTorrent](http://search.cpan.org/perldoc?AnyEvent::BitTorrent) is meant to meet that bare
minimum but it's based on [Moose](http://search.cpan.org/perldoc?Moose) or [Mouse](http://search.cpan.org/perldoc?Mouse) so you could always
subclass it to add more advanced functionality. Hint, hint!

## [What is currently supported?][What_is_currently_supported?]

Basic stuff. We can make and handle piece requests. Deal with cancels,
disconnect idle peers, unchoke folks. Normal... stuff. HTTP trackers are
supported but do not perform according to spec yet.

## [What will probably be supported in the future?][What_will_probably_be_supported_in_the_future?]

DHT (which will likely be in a separate dist), fast extensions, multi-tracker
extensions, IPv6 stuff, file download priorities... I'll get around to those.

Long term, UDP trackers may be supported.

For a detailed list, see the ToDo file included with this distribution.

## [What will likely never be supported?][What_will_likely_never_be_supported?]

We can't have nice things. Protocol encryption, uTP, endgame tricks, ...these
will probably never be included in [AnyEvent::BitTorrent](http://search.cpan.org/perldoc?AnyEvent::BitTorrent).

## [What should I use instead?][What_should_I_use_instead?]

If you're reading all of this with a scowl, there are many alternatives to
this module, most of which are sure to be better suited for advanced users. I
suggest (in no particular order):

- [BitFlu](http://bitflu.workaround.ch/). It's written in Perl but you'll
still need to be on a Linux, *BSD, et al. system to use it.
- [Net::BitTorrent](http://search.cpan.org/perldoc?Net::BitTorrent) ...in the future. I _do not_ suggest using either
the current stable or unstable versions found on CPAN. The next version is
being worked on and will be based on [Reflex](http://search.cpan.org/perldoc?Reflex).

If you're working on a Perl based client and would like me to link to it, send
a bug report to the tracker [listed below](#Bug_Reports).

# [Subclassing AnyEvent::BitTorrent][Subclassing_AnyEvent::BitTorrent]

TODO

If you subclass this module and change the way it functions to that which in
any way proves harmful to individual peers or the swarm at large, rather than
damage [AnyEvent::BitTorrent](http://search.cpan.org/perldoc?AnyEvent::BitTorrent)'s reputation, override the peerid attribute.
Thanks.

# [PeerID Specification][PeerID_Specification]

[AnyEvent::BitTorrent](http://search.cpan.org/perldoc?AnyEvent::BitTorrent) may be identified in a swarm by its peer id. As of
this version, our peer id looks sorta like:

    -AB0110-XXXXXXXXXXXX

Where `0110` are the Major (`01`) and minor (`10`) version numbers and the
`X`s are random filler.

# [Bug Reports][Bug_Reports]

If email is better for you, [my address is mentioned below](#Author) but I
would rather have bugs sent through the issue tracker found at
http://github.com/sanko/anyevent-bittorrent/issues.

Please check the ToDo file included with this distribution in case your bug
is already known (...I probably won't file bug reports to myself).

# [See Also][See_Also]

[Net::BitTorrent::Protocol](http://search.cpan.org/perldoc?Net::BitTorrent::Protocol) - The package which does all of the wire protocol
level heavy lifting.

# [Author][Author]

Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

CPAN ID: SANKO

# [License and Legal][License_and_Legal]

Copyright (C) 2011-2012 by Sanko Robinson <sanko@cpan.org>

This program is free software; you can redistribute it and/or modify it under
the terms of
[The Artistic License 2.0](http://www.perlfoundation.org/artistic_license_2_0).
See the `LICENSE` file included with this distribution or
[notes on the Artistic License 2.0](http://www.perlfoundation.org/artistic_2_0_notes)
for clarification.

When separated from the distribution, all original POD documentation is
covered by the
[Creative Commons Attribution-Share Alike 3.0 License](http://creativecommons.org/licenses/by-sa/3.0/us/legalcode).
See the
[clarification of the CCA-SA3.0](http://creativecommons.org/licenses/by-sa/3.0/us/).

Neither this module nor the [Author](#Author) is affiliated with BitTorrent,
Inc.